// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id             String         @id @default(uuid())
  name           String
  slug           String         @unique
  description    String
  avatarImageUrl String
  coverImageUrl  String
  menuCategories MenuCategory[]
  products       Product[]
  orders         Order[]
  createdAt      DateTime       @default(now())
  updateAt       DateTime       @updatedAt
}

model MenuCategory {
  id           String     @id @default(uuid())
  name         String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  products     Product[]
  createdAt    DateTime   @default(now())
  updateAt     DateTime   @updatedAt
}

model Product {
  id           String         @id @default(uuid())
  name         String
  slug         String         @unique
  description  String
  price        Float
  imageUrl     String
  ingredients  String[]
  restaurant   Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  category     MenuCategory   @relation(fields: [categoryId], references: [id])
  restaurantId String
  categoryId   String
  orderProduct OrderProduct[]
  createdAt    DateTime       @default(now())
  updateAt     DateTime       @updatedAt
}

model Order {
  id                String            @id @default(uuid())
  total             Float
  status            orderStatus
  consumptionMethod consumptionMethod
  restaurant        Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId      String
  orderProduct      OrderProduct[]
  createdAt         DateTime          @default(now())
  updateAt          DateTime          @updatedAt
  customerName      String
  customerCPF       String
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  produt    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

enum orderStatus {
  PENDING
  CONFIRMED
  IN_PREPARATION
  FINISHED
  IN_DELIVERY
  DELIVERED
  CANCELLED
}

enum consumptionMethod {
  ON_PLACE
  DELIVERY
}
